<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
	<!-- DATABASE PART * 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@192.168.14.100:1521:orcl" />
		<property name="username" value="dfish" />
		<property name="password" value="dfish" />
	</bean>-->
	<!-- DATABASE PART * -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
    	<property name="url" value="jdbc:oracle:thin:@192.168.1.12:1521:orcl" />
    	<property name="username" value="whp" />
    	<property name="password" value="whp" />
	</bean>
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://39.96.68.92:3306/wisdom_plan_check?useUnicode=true&amp;characterEncoding=utf-8" />
		<property name="username" value="root" />
		<property name="password" value="onlybelieve@123" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref local="dataSource" />
		</constructor-arg>
	</bean>
	
	<!-- 通过SOAP方式访问 结束 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>-->
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>-->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.cache.use_minimal_puts">true</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
				<prop key="hibernate.default_batch_fetch_size">8</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.order_updates">true</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<prop key="hibernate.jdbc.fetch_size">60</prop>
				<prop key="hibernate.jdbc.batch_size">40</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop><!-- 开启二级缓存,默认就是开启状态 -->
			</props>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:/com/wpc/persistence/User.hbm.xml</value>				
				<value>classpath:/com/wpc/persistence/PurchaseNotice.hbm.xml</value>	
																																											
             </list>
		</property>
	</bean>
	
	
	<!-- 配置数据库事务管理器 transactionManager-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<!-- 配置Spring配置式事务代理（txProxyTemplate） -->
	<!-- txProxyTemplate 是一个抽象的定义，全部业务逻辑Bean的定义将继承其定义，从而获得Spring的配置式事务能力 -->
	<bean id="txProxyTemplate" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>            
				<prop key="select*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<!-- Hibernate实现数据访问接口 -->
	<!-- 实体持久化类需在Spring的上下文配置中定义，以便业务逻辑类可以从Spring环境中获取并使用。由于实体持久化类没有存储任何状态数据，因此应使用单例模式。 -->
	<bean id="PubCommonDAO"
		class="com.rongji.dfish.dao.impl.PubCommonDAOImpl">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="userDao"
		class="com.wpc.dao.impl.UserDaoImpl">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<!-- 业务逻辑类我们将实施Spring的配置化事务，因此其配置应扩展txProxyTemplate的配置，同时应注意业务逻辑类的方法命名应匹配txProxyTemplate定义的方法名，否则Spring无法使用AOP机制插入事务处理 -->
	<bean id="userService" parent="txProxyTemplate">
		<property name="target">
			<bean class="com.wpc.service.impl.UserServiceImpl" >
				<property name="userDao" ref="userDao"/>
			</bean>
		</property>
	</bean>
	
	<bean id="followService"
		class="com.wpc.service.impl.FollowDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="praiseService"
		class="com.wpc.service.impl.PraiseDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<bean id="commentService"
		class="com.wpc.service.impl.CommentDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>	
	
	<bean id="videoService"
		class="com.wpc.service.impl.VideoDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="cateService"
		class="com.wpc.service.impl.CateDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="specialService"
		class="com.wpc.service.impl.SpecialDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="authorService"
		class="com.wpc.service.impl.AuthorDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="tagService"
		class="com.wpc.service.impl.TagDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="advertService"
		class="com.wpc.service.impl.AdvertDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="historyService"
		class="com.wpc.service.impl.HistoryDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="countService"
		class="com.wpc.service.impl.CountDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="codeService"
		class="com.wpc.service.impl.CodeDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="configService"
		class="com.wpc.service.impl.ConfigDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="feedbackService"
		class="com.wpc.service.impl.FeedbackDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="appVersionService"
		class="com.wpc.service.impl.AppVersionDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="purchaseNoticeService"
		class="com.wpc.service.impl.PurchaseNoticeDBMethod">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<!-- 短信服务 -->
	<bean id="smsService" parent="txProxyTemplate">
		<property name="target">
			<bean class="com.wpc.service.impl.SmsServiceImpl" >
				<property name="serviceUrl" value="http://211.151.85.133:8080"/>
				<property name="username" value="keyunji"/>
				<property name="password" value="pkeyunji"/>
			</bean>
		</property>
	</bean>
</beans>